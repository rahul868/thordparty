import React, { useState } from "react";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { Inter } from "next/font/google";
import {
  Flex,
  Box,
  VStack,
  Input,
  FormControl,
  Button,
  FormLabel,
  Text,
  HStack,
  Heading,
  FormHelperText,
} from "@chakra-ui/react";
// import RegistrationForm from '_/components/layout/
import styles from "@/styles/Auth/signin.module.css";
import { ChakraProvider } from '@chakra-ui/react';

const poppins = Inter({ weight: "400", subsets: ["latin"] });

export default function SignUp() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [username, setUsername] = useState("");
  const [confirmPass, setConfirmPass] = useState("");
  const [isPasswordMatch, setIsPasswordMatch] = useState(true);
  const [isvalidemail, setIsvalidemail] = useState(true);
  const [isvalidpassword, setIsvalidpassword] = useState(true);
  const [isvalidusername, setIsvalidusername] = useState(true);
  const [isloading, setIsloading] = useState(false);
  const [iserror, setIserror] = useState(false);

  const colors = {
    bigiota: {
      blue: "#7385fb",
    },
  };

  const verifyEmail = () => {
    const emailRegex = /^[\w\.-]+@[a-zA-Z\d\.-]+\.[a-zA-Z]{2,}$/;
    return emailRegex.test(email);
  };

  const verifyPassword = () => {
    const passwordRegex =
      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()-=_+{}|;:'",<>/`~])[a-zA-Z\d!@#$%^&*()-=_+{}|;:'",<>/`~]{8,}$/;
    return passwordRegex.test(password);
  };

  const clearForm = () => {
    setEmail("");
    setPassword("");
    setUsername("");
    setConfirmPass("");
    setIsPasswordMatch(true);
    setIsvalidemail(true);
    setIsvalidpassword(true);
    setIsvalidusername(true);
    setIsloading(false);
    setIserror(false);
  };
  const registerUser = async () => {
    try {
      setIsloading(true);
      if (!verifyEmail()) {
        setIsvalidemail(false);
        return;
      } else {
        setIsvalidemail(true);
      }

      if (!verifyPassword()) {
        setIsvalidpassword(false);
        return;
      } else {
        setIsvalidpassword(true);
      }

      if (confirmPass !== password) {
        setIsPasswordMatch(false);
        return;
      } else {
        setIsPasswordMatch(true);
      }

      if (username == "") {
        setIsvalidusername(false);
        return;
      } else {
        setIsPasswordMatch(true);
      }

      const response = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL}/register`,
        {
          method: "POST",
          body: JSON.stringify({
            username,
            email,
            password,
          }),
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
      const user = await response.json();
      if (!response.ok) {
        throw Error(user.detail);
      }
      if (user.detail) {
        alert("User is already registred.");
        return;
      }
      if (user.email && user.message) {
        alert("Registration is successful");
        clearForm();
        setTimeout(() => {
          return (window.location.href = "/signin");
        }, 3000);
      }
    } catch (err) {
      clearForm();
      alert(err);
    } finally {
      setIsloading(false);
    }
  };
  return (
    <ChakraProvider>
      <Head>
        <title>Documentia | Sign-Up</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/assets/images/logo.png" />
      </Head>
      <main className={`${styles.main} ${poppins.className}`}>
        <Flex className={styles.auth_main}>
          <VStack className={styles.signin_left} padding={"3rem"}>
            <Link href={"/"}>
              <Image
                src={"/assets/images/logo.png"}
                alt="Logo"
                width={280}
                height={60}
              />
            </Link>
            <Text fontSize={"medium"} fontWeight={"bold"} as="h2">
              Create your account
            </Text>
            <FormControl>
              <Box margin={"1rem 0"} fontSize={"15px"}>
                <FormLabel>Email</FormLabel>
                <Input
                  size={["sm", "md", "md", "md"]}
                  type="email"
                  placeholder="Enter your email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                />
                {!isvalidemail ? (
                  <FormHelperText style={{ color: "red" }}>
                    Please enter valid email.
                  </FormHelperText>
                ) : (
                  <></>
                )}
              </Box>
              <Box margin={"1rem 0"}>
                <FormLabel>Password</FormLabel>
                <Input
                  size={["sm", "md", "md", "md"]}
                  type="password"
                  placeholder="Enter your password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                />
                {!isvalidpassword ? (
                  <FormHelperText style={{ color: "red" }}>
                    Please create strong password.
                  </FormHelperText>
                ) : (
                  <></>
                )}
              </Box>
              <Box margin={"1rem 0"}>
                <FormLabel>Confirm Password</FormLabel>
                <Input
                  size={["sm", "md", "md", "md"]}
                  type="password"
                  placeholder="Confirm your password"
                  value={confirmPass}
                  onChange={(e) => setConfirmPass(e.target.value)}
                />
                {!isPasswordMatch ? (
                  <FormHelperText style={{ color: "red" }}>
                    Password is not matching. Please try again.
                  </FormHelperText>
                ) : (
                  <></>
                )}
              </Box>
              <Box margin={"1rem 0"}>
                <FormLabel>Username</FormLabel>
                <Input
                  size={["sm", "md", "md", "md"]}
                  type="email"
                  placeholder="Enter username for you"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                />
                {!isvalidusername ? (
                  <FormHelperText style={{ color: "red" }}>
                    Please type username for you.
                  </FormHelperText>
                ) : (
                  <></>
                )}
              </Box>
              <HStack justifyContent={"center"} margin={"1rem 0"}>
                <Button
                  size={["sm", "md"]}
                  color={"white"}
                  borderRadius={0}
                  backgroundColor={colors.bigiota.blue}
                  onClick={registerUser}
                  isDisabled={!isloading ? false : true}
                >
                  {!isloading ? "Register" : "Registering..."}
                </Button>

                {/* <Link href={'/signin'}>Forgot your password</Link> */}
              </HStack>
              <HStack justifyContent={"center"} marginTop={"4rem"}>
                <Text fontWeight={"400"}>Already registered</Text>
                <Link href="/signin">
                  <Text color={colors.bigiota.blue}>Sign-In</Text>
                </Link>
              </HStack>
            </FormControl>
          </VStack>
          <VStack className={styles.signin_right}>
            <Text
              width={"100%"}
              color="white"
              fontSize={"28px"}
              fontWeight={"900"}
            >
              We are more than just a company
            </Text>
            <Text color="white" fontWeight={"500"}>
              Documentia is a proprietary AI-based foundational model which
              generates the foundation for the Generative AI applications like
              ChatGPT, Llama, and Falcon.
            </Text>
          </VStack>
        </Flex>
      </main>
    </ChakraProvider>
  );
}
